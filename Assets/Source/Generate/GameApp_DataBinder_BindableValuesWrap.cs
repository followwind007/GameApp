//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class GameApp_DataBinder_BindableValuesWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(GameApp.DataBinder.BindableValues), typeof(System.Object));
		L.RegFunction("get_Item", new LuaCSFunction(get_Item));
		L.RegFunction("GetData", new LuaCSFunction(GetData));
		L.RegFunction("GetDataEnumerator", new LuaCSFunction(GetDataEnumerator));
		L.RegFunction("Init", new LuaCSFunction(Init));
		L.RegFunction("GetDefault", new LuaCSFunction(GetDefault));
		L.RegFunction("ClearAll", new LuaCSFunction(ClearAll));
		L.RegFunction("Regenerate", new LuaCSFunction(Regenerate));
		L.RegFunction("OnBeforeSerialize", new LuaCSFunction(OnBeforeSerialize));
		L.RegFunction("OnAfterDeserialize", new LuaCSFunction(OnAfterDeserialize));
		L.RegFunction("New", new LuaCSFunction(_CreateGameApp_DataBinder_BindableValues));
		L.RegVar("this", _this, null);
		L.RegFunction("__tostring", new LuaCSFunction(ToLua.op_ToString));
		L.RegVar("wraps", new LuaCSFunction(get_wraps), new LuaCSFunction(set_wraps));
		L.RegVar("valDict", new LuaCSFunction(get_valDict), null);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateGameApp_DataBinder_BindableValues(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 0)
			{
				GameApp.DataBinder.BindableValues obj = new GameApp.DataBinder.BindableValues();
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: GameApp.DataBinder.BindableValues.New");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _get_this(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			GameApp.DataBinder.BindableValues obj = (GameApp.DataBinder.BindableValues)ToLua.CheckObject<GameApp.DataBinder.BindableValues>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			object o = obj[arg0];
			ToLua.Push(L, o);
			return 1;

		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _this(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushvalue(L, 1);
			LuaDLL.tolua_bindthis(L, _get_this, null);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Item(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			GameApp.DataBinder.BindableValues obj = (GameApp.DataBinder.BindableValues)ToLua.CheckObject<GameApp.DataBinder.BindableValues>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			object o = obj[arg0];
			ToLua.Push(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetData(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			GameApp.DataBinder.BindableValues obj = (GameApp.DataBinder.BindableValues)ToLua.CheckObject<GameApp.DataBinder.BindableValues>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			object o = obj.GetData(arg0);
			ToLua.Push(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetDataEnumerator(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			GameApp.DataBinder.BindableValues obj = (GameApp.DataBinder.BindableValues)ToLua.CheckObject<GameApp.DataBinder.BindableValues>(L, 1);
			System.Collections.IEnumerator o = obj.GetDataEnumerator();
			ToLua.Push(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Init(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			GameApp.DataBinder.BindableValues obj = (GameApp.DataBinder.BindableValues)ToLua.CheckObject<GameApp.DataBinder.BindableValues>(L, 1);
			obj.Init();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetDefault(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			GameApp.DataBinder.ValueType arg0 = (GameApp.DataBinder.ValueType)ToLua.CheckObject(L, 1, TypeTraits<GameApp.DataBinder.ValueType>.type);
			object o = GameApp.DataBinder.BindableValues.GetDefault(arg0);
			ToLua.Push(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ClearAll(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			GameApp.DataBinder.BindableValues obj = (GameApp.DataBinder.BindableValues)ToLua.CheckObject<GameApp.DataBinder.BindableValues>(L, 1);
			obj.ClearAll();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Regenerate(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				GameApp.DataBinder.BindableValues obj = (GameApp.DataBinder.BindableValues)ToLua.CheckObject<GameApp.DataBinder.BindableValues>(L, 1);
				obj.Regenerate();
				return 0;
			}
			else if (count == 2)
			{
				GameApp.DataBinder.BindableValues obj = (GameApp.DataBinder.BindableValues)ToLua.CheckObject<GameApp.DataBinder.BindableValues>(L, 1);
				System.Collections.Generic.IEnumerable<GameApp.DataBinder.ValueWrap> arg0 = (System.Collections.Generic.IEnumerable<GameApp.DataBinder.ValueWrap>)ToLua.CheckObject<System.Collections.Generic.IEnumerable<GameApp.DataBinder.ValueWrap>>(L, 2);
				obj.Regenerate(arg0);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: GameApp.DataBinder.BindableValues.Regenerate");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OnBeforeSerialize(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			GameApp.DataBinder.BindableValues obj = (GameApp.DataBinder.BindableValues)ToLua.CheckObject<GameApp.DataBinder.BindableValues>(L, 1);
			obj.OnBeforeSerialize();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OnAfterDeserialize(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			GameApp.DataBinder.BindableValues obj = (GameApp.DataBinder.BindableValues)ToLua.CheckObject<GameApp.DataBinder.BindableValues>(L, 1);
			obj.OnAfterDeserialize();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_wraps(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			GameApp.DataBinder.BindableValues obj = (GameApp.DataBinder.BindableValues)o;
			System.Collections.Generic.List<GameApp.DataBinder.ValueWrap> ret = obj.wraps;
			ToLua.PushSealed(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index wraps on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_valDict(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			GameApp.DataBinder.BindableValues obj = (GameApp.DataBinder.BindableValues)o;
			System.Collections.Generic.Dictionary<string,object> ret = obj.valDict;
			ToLua.PushSealed(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index valDict on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_wraps(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			GameApp.DataBinder.BindableValues obj = (GameApp.DataBinder.BindableValues)o;
			System.Collections.Generic.List<GameApp.DataBinder.ValueWrap> arg0 = (System.Collections.Generic.List<GameApp.DataBinder.ValueWrap>)ToLua.CheckObject(L, 2, TypeTraits<System.Collections.Generic.List<GameApp.DataBinder.ValueWrap>>.type);
			obj.wraps = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index wraps on a nil value");
		}
	}
}

