//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class BehaviorDesigner_Runtime_BehaviorManagerWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(BehaviorDesigner.Runtime.BehaviorManager), typeof(UnityEngine.MonoBehaviour));
		L.RegFunction("Awake", new LuaCSFunction(Awake));
		L.RegFunction("OnDestroy", new LuaCSFunction(OnDestroy));
		L.RegFunction("OnApplicationQuit", new LuaCSFunction(OnApplicationQuit));
		L.RegFunction("EnableBehavior", new LuaCSFunction(EnableBehavior));
		L.RegFunction("DisableBehavior", new LuaCSFunction(DisableBehavior));
		L.RegFunction("DestroyBehavior", new LuaCSFunction(DestroyBehavior));
		L.RegFunction("RestartBehavior", new LuaCSFunction(RestartBehavior));
		L.RegFunction("IsBehaviorEnabled", new LuaCSFunction(IsBehaviorEnabled));
		L.RegFunction("Update", new LuaCSFunction(Update));
		L.RegFunction("LateUpdate", new LuaCSFunction(LateUpdate));
		L.RegFunction("FixedUpdate", new LuaCSFunction(FixedUpdate));
		L.RegFunction("Tick", new LuaCSFunction(Tick));
		L.RegFunction("Interrupt", new LuaCSFunction(Interrupt));
		L.RegFunction("StopThirdPartyTask", new LuaCSFunction(StopThirdPartyTask));
		L.RegFunction("RemoveActiveThirdPartyTask", new LuaCSFunction(RemoveActiveThirdPartyTask));
		L.RegFunction("GetActiveTasks", new LuaCSFunction(GetActiveTasks));
		L.RegFunction("BehaviorOnCollisionEnter", new LuaCSFunction(BehaviorOnCollisionEnter));
		L.RegFunction("BehaviorOnCollisionExit", new LuaCSFunction(BehaviorOnCollisionExit));
		L.RegFunction("BehaviorOnTriggerEnter", new LuaCSFunction(BehaviorOnTriggerEnter));
		L.RegFunction("BehaviorOnTriggerExit", new LuaCSFunction(BehaviorOnTriggerExit));
		L.RegFunction("BehaviorOnCollisionEnter2D", new LuaCSFunction(BehaviorOnCollisionEnter2D));
		L.RegFunction("BehaviorOnCollisionExit2D", new LuaCSFunction(BehaviorOnCollisionExit2D));
		L.RegFunction("BehaviorOnTriggerEnter2D", new LuaCSFunction(BehaviorOnTriggerEnter2D));
		L.RegFunction("BehaviorOnTriggerExit2D", new LuaCSFunction(BehaviorOnTriggerExit2D));
		L.RegFunction("BehaviorOnControllerColliderHit", new LuaCSFunction(BehaviorOnControllerColliderHit));
		L.RegFunction("BehaviorOnAnimatorIK", new LuaCSFunction(BehaviorOnAnimatorIK));
		L.RegFunction("MapObjectToTask", new LuaCSFunction(MapObjectToTask));
		L.RegFunction("TaskForObject", new LuaCSFunction(TaskForObject));
		L.RegFunction("GetTaskList", new LuaCSFunction(GetTaskList));
		L.RegFunction("__eq", new LuaCSFunction(op_Equality));
		L.RegFunction("__tostring", new LuaCSFunction(ToLua.op_ToString));
		L.RegVar("instance", new LuaCSFunction(get_instance), new LuaCSFunction(set_instance));
		L.RegVar("onEnableBehavior", new LuaCSFunction(get_onEnableBehavior), new LuaCSFunction(set_onEnableBehavior));
		L.RegVar("onTaskBreakpoint", new LuaCSFunction(get_onTaskBreakpoint), new LuaCSFunction(set_onTaskBreakpoint));
		L.RegVar("UpdateInterval", new LuaCSFunction(get_UpdateInterval), new LuaCSFunction(set_UpdateInterval));
		L.RegVar("UpdateIntervalSeconds", new LuaCSFunction(get_UpdateIntervalSeconds), new LuaCSFunction(set_UpdateIntervalSeconds));
		L.RegVar("ExecutionsPerTick", new LuaCSFunction(get_ExecutionsPerTick), new LuaCSFunction(set_ExecutionsPerTick));
		L.RegVar("MaxTaskExecutionsPerTick", new LuaCSFunction(get_MaxTaskExecutionsPerTick), new LuaCSFunction(set_MaxTaskExecutionsPerTick));
		L.RegVar("UnitTesting", null, new LuaCSFunction(set_UnitTesting));
		L.RegVar("OnEnableBehavior", new LuaCSFunction(get_OnEnableBehavior), new LuaCSFunction(set_OnEnableBehavior));
		L.RegVar("OnTaskBreakpoint", new LuaCSFunction(get_OnTaskBreakpoint), new LuaCSFunction(set_OnTaskBreakpoint));
		L.RegVar("IsPlaying", new LuaCSFunction(get_IsPlaying), null);
		L.RegVar("BehaviorTrees", new LuaCSFunction(get_BehaviorTrees), null);
		L.RegVar("BreakpointTree", new LuaCSFunction(get_BreakpointTree), new LuaCSFunction(set_BreakpointTree));
		L.RegVar("Dirty", new LuaCSFunction(get_Dirty), new LuaCSFunction(set_Dirty));
		L.RegFunction("BehaviorManagerHandler", new LuaCSFunction(BehaviorDesigner_Runtime_BehaviorManager_BehaviorManagerHandler));
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Awake(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			BehaviorDesigner.Runtime.BehaviorManager obj = (BehaviorDesigner.Runtime.BehaviorManager)ToLua.CheckObject<BehaviorDesigner.Runtime.BehaviorManager>(L, 1);
			obj.Awake();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OnDestroy(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			BehaviorDesigner.Runtime.BehaviorManager obj = (BehaviorDesigner.Runtime.BehaviorManager)ToLua.CheckObject<BehaviorDesigner.Runtime.BehaviorManager>(L, 1);
			obj.OnDestroy();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OnApplicationQuit(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			BehaviorDesigner.Runtime.BehaviorManager obj = (BehaviorDesigner.Runtime.BehaviorManager)ToLua.CheckObject<BehaviorDesigner.Runtime.BehaviorManager>(L, 1);
			obj.OnApplicationQuit();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int EnableBehavior(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			BehaviorDesigner.Runtime.BehaviorManager obj = (BehaviorDesigner.Runtime.BehaviorManager)ToLua.CheckObject<BehaviorDesigner.Runtime.BehaviorManager>(L, 1);
			BehaviorDesigner.Runtime.Behavior arg0 = (BehaviorDesigner.Runtime.Behavior)ToLua.CheckObject<BehaviorDesigner.Runtime.Behavior>(L, 2);
			obj.EnableBehavior(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int DisableBehavior(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				BehaviorDesigner.Runtime.BehaviorManager obj = (BehaviorDesigner.Runtime.BehaviorManager)ToLua.CheckObject<BehaviorDesigner.Runtime.BehaviorManager>(L, 1);
				BehaviorDesigner.Runtime.Behavior arg0 = (BehaviorDesigner.Runtime.Behavior)ToLua.CheckObject<BehaviorDesigner.Runtime.Behavior>(L, 2);
				obj.DisableBehavior(arg0);
				return 0;
			}
			else if (count == 3)
			{
				BehaviorDesigner.Runtime.BehaviorManager obj = (BehaviorDesigner.Runtime.BehaviorManager)ToLua.CheckObject<BehaviorDesigner.Runtime.BehaviorManager>(L, 1);
				BehaviorDesigner.Runtime.Behavior arg0 = (BehaviorDesigner.Runtime.Behavior)ToLua.CheckObject<BehaviorDesigner.Runtime.Behavior>(L, 2);
				bool arg1 = LuaDLL.luaL_checkboolean(L, 3);
				obj.DisableBehavior(arg0, arg1);
				return 0;
			}
			else if (count == 4)
			{
				BehaviorDesigner.Runtime.BehaviorManager obj = (BehaviorDesigner.Runtime.BehaviorManager)ToLua.CheckObject<BehaviorDesigner.Runtime.BehaviorManager>(L, 1);
				BehaviorDesigner.Runtime.Behavior arg0 = (BehaviorDesigner.Runtime.Behavior)ToLua.CheckObject<BehaviorDesigner.Runtime.Behavior>(L, 2);
				bool arg1 = LuaDLL.luaL_checkboolean(L, 3);
				BehaviorDesigner.Runtime.Tasks.TaskStatus arg2 = (BehaviorDesigner.Runtime.Tasks.TaskStatus)ToLua.CheckObject(L, 4, TypeTraits<BehaviorDesigner.Runtime.Tasks.TaskStatus>.type);
				obj.DisableBehavior(arg0, arg1, arg2);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: BehaviorDesigner.Runtime.BehaviorManager.DisableBehavior");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int DestroyBehavior(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				BehaviorDesigner.Runtime.BehaviorManager obj = (BehaviorDesigner.Runtime.BehaviorManager)ToLua.CheckObject<BehaviorDesigner.Runtime.BehaviorManager>(L, 1);
				BehaviorDesigner.Runtime.Behavior arg0 = (BehaviorDesigner.Runtime.Behavior)ToLua.CheckObject<BehaviorDesigner.Runtime.Behavior>(L, 2);
				obj.DestroyBehavior(arg0);
				return 0;
			}
			else if (count == 3)
			{
				BehaviorDesigner.Runtime.BehaviorManager obj = (BehaviorDesigner.Runtime.BehaviorManager)ToLua.CheckObject<BehaviorDesigner.Runtime.BehaviorManager>(L, 1);
				BehaviorDesigner.Runtime.Behavior arg0 = (BehaviorDesigner.Runtime.Behavior)ToLua.CheckObject<BehaviorDesigner.Runtime.Behavior>(L, 2);
				BehaviorDesigner.Runtime.Tasks.TaskStatus arg1 = (BehaviorDesigner.Runtime.Tasks.TaskStatus)ToLua.CheckObject(L, 3, TypeTraits<BehaviorDesigner.Runtime.Tasks.TaskStatus>.type);
				obj.DestroyBehavior(arg0, arg1);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: BehaviorDesigner.Runtime.BehaviorManager.DestroyBehavior");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int RestartBehavior(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			BehaviorDesigner.Runtime.BehaviorManager obj = (BehaviorDesigner.Runtime.BehaviorManager)ToLua.CheckObject<BehaviorDesigner.Runtime.BehaviorManager>(L, 1);
			BehaviorDesigner.Runtime.Behavior arg0 = (BehaviorDesigner.Runtime.Behavior)ToLua.CheckObject<BehaviorDesigner.Runtime.Behavior>(L, 2);
			obj.RestartBehavior(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int IsBehaviorEnabled(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			BehaviorDesigner.Runtime.BehaviorManager obj = (BehaviorDesigner.Runtime.BehaviorManager)ToLua.CheckObject<BehaviorDesigner.Runtime.BehaviorManager>(L, 1);
			BehaviorDesigner.Runtime.Behavior arg0 = (BehaviorDesigner.Runtime.Behavior)ToLua.CheckObject<BehaviorDesigner.Runtime.Behavior>(L, 2);
			bool o = obj.IsBehaviorEnabled(arg0);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Update(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			BehaviorDesigner.Runtime.BehaviorManager obj = (BehaviorDesigner.Runtime.BehaviorManager)ToLua.CheckObject<BehaviorDesigner.Runtime.BehaviorManager>(L, 1);
			obj.Update();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int LateUpdate(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			BehaviorDesigner.Runtime.BehaviorManager obj = (BehaviorDesigner.Runtime.BehaviorManager)ToLua.CheckObject<BehaviorDesigner.Runtime.BehaviorManager>(L, 1);
			obj.LateUpdate();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int FixedUpdate(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			BehaviorDesigner.Runtime.BehaviorManager obj = (BehaviorDesigner.Runtime.BehaviorManager)ToLua.CheckObject<BehaviorDesigner.Runtime.BehaviorManager>(L, 1);
			obj.FixedUpdate();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Tick(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				BehaviorDesigner.Runtime.BehaviorManager obj = (BehaviorDesigner.Runtime.BehaviorManager)ToLua.CheckObject<BehaviorDesigner.Runtime.BehaviorManager>(L, 1);
				obj.Tick();
				return 0;
			}
			else if (count == 2)
			{
				BehaviorDesigner.Runtime.BehaviorManager obj = (BehaviorDesigner.Runtime.BehaviorManager)ToLua.CheckObject<BehaviorDesigner.Runtime.BehaviorManager>(L, 1);
				BehaviorDesigner.Runtime.Behavior arg0 = (BehaviorDesigner.Runtime.Behavior)ToLua.CheckObject<BehaviorDesigner.Runtime.Behavior>(L, 2);
				obj.Tick(arg0);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: BehaviorDesigner.Runtime.BehaviorManager.Tick");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Interrupt(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 3)
			{
				BehaviorDesigner.Runtime.BehaviorManager obj = (BehaviorDesigner.Runtime.BehaviorManager)ToLua.CheckObject<BehaviorDesigner.Runtime.BehaviorManager>(L, 1);
				BehaviorDesigner.Runtime.Behavior arg0 = (BehaviorDesigner.Runtime.Behavior)ToLua.CheckObject<BehaviorDesigner.Runtime.Behavior>(L, 2);
				BehaviorDesigner.Runtime.Tasks.Task arg1 = (BehaviorDesigner.Runtime.Tasks.Task)ToLua.CheckObject<BehaviorDesigner.Runtime.Tasks.Task>(L, 3);
				obj.Interrupt(arg0, arg1);
				return 0;
			}
			else if (count == 4 && TypeChecker.CheckTypes<BehaviorDesigner.Runtime.Tasks.TaskStatus>(L, 4))
			{
				BehaviorDesigner.Runtime.BehaviorManager obj = (BehaviorDesigner.Runtime.BehaviorManager)ToLua.CheckObject<BehaviorDesigner.Runtime.BehaviorManager>(L, 1);
				BehaviorDesigner.Runtime.Behavior arg0 = (BehaviorDesigner.Runtime.Behavior)ToLua.CheckObject<BehaviorDesigner.Runtime.Behavior>(L, 2);
				BehaviorDesigner.Runtime.Tasks.Task arg1 = (BehaviorDesigner.Runtime.Tasks.Task)ToLua.CheckObject<BehaviorDesigner.Runtime.Tasks.Task>(L, 3);
				BehaviorDesigner.Runtime.Tasks.TaskStatus arg2 = (BehaviorDesigner.Runtime.Tasks.TaskStatus)ToLua.ToObject(L, 4);
				obj.Interrupt(arg0, arg1, arg2);
				return 0;
			}
			else if (count == 4 && TypeChecker.CheckTypes<BehaviorDesigner.Runtime.Tasks.Task>(L, 4))
			{
				BehaviorDesigner.Runtime.BehaviorManager obj = (BehaviorDesigner.Runtime.BehaviorManager)ToLua.CheckObject<BehaviorDesigner.Runtime.BehaviorManager>(L, 1);
				BehaviorDesigner.Runtime.Behavior arg0 = (BehaviorDesigner.Runtime.Behavior)ToLua.CheckObject<BehaviorDesigner.Runtime.Behavior>(L, 2);
				BehaviorDesigner.Runtime.Tasks.Task arg1 = (BehaviorDesigner.Runtime.Tasks.Task)ToLua.CheckObject<BehaviorDesigner.Runtime.Tasks.Task>(L, 3);
				BehaviorDesigner.Runtime.Tasks.Task arg2 = (BehaviorDesigner.Runtime.Tasks.Task)ToLua.ToObject(L, 4);
				obj.Interrupt(arg0, arg1, arg2);
				return 0;
			}
			else if (count == 5)
			{
				BehaviorDesigner.Runtime.BehaviorManager obj = (BehaviorDesigner.Runtime.BehaviorManager)ToLua.CheckObject<BehaviorDesigner.Runtime.BehaviorManager>(L, 1);
				BehaviorDesigner.Runtime.Behavior arg0 = (BehaviorDesigner.Runtime.Behavior)ToLua.CheckObject<BehaviorDesigner.Runtime.Behavior>(L, 2);
				BehaviorDesigner.Runtime.Tasks.Task arg1 = (BehaviorDesigner.Runtime.Tasks.Task)ToLua.CheckObject<BehaviorDesigner.Runtime.Tasks.Task>(L, 3);
				BehaviorDesigner.Runtime.Tasks.Task arg2 = (BehaviorDesigner.Runtime.Tasks.Task)ToLua.CheckObject<BehaviorDesigner.Runtime.Tasks.Task>(L, 4);
				BehaviorDesigner.Runtime.Tasks.TaskStatus arg3 = (BehaviorDesigner.Runtime.Tasks.TaskStatus)ToLua.CheckObject(L, 5, TypeTraits<BehaviorDesigner.Runtime.Tasks.TaskStatus>.type);
				obj.Interrupt(arg0, arg1, arg2, arg3);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: BehaviorDesigner.Runtime.BehaviorManager.Interrupt");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int StopThirdPartyTask(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			BehaviorDesigner.Runtime.BehaviorManager obj = (BehaviorDesigner.Runtime.BehaviorManager)ToLua.CheckObject<BehaviorDesigner.Runtime.BehaviorManager>(L, 1);
			BehaviorDesigner.Runtime.BehaviorManager.BehaviorTree arg0 = (BehaviorDesigner.Runtime.BehaviorManager.BehaviorTree)ToLua.CheckObject<BehaviorDesigner.Runtime.BehaviorManager.BehaviorTree>(L, 2);
			int arg1 = (int)LuaDLL.luaL_checkinteger(L, 3);
			obj.StopThirdPartyTask(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int RemoveActiveThirdPartyTask(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			BehaviorDesigner.Runtime.BehaviorManager obj = (BehaviorDesigner.Runtime.BehaviorManager)ToLua.CheckObject<BehaviorDesigner.Runtime.BehaviorManager>(L, 1);
			BehaviorDesigner.Runtime.Tasks.Task arg0 = (BehaviorDesigner.Runtime.Tasks.Task)ToLua.CheckObject<BehaviorDesigner.Runtime.Tasks.Task>(L, 2);
			obj.RemoveActiveThirdPartyTask(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetActiveTasks(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			BehaviorDesigner.Runtime.BehaviorManager obj = (BehaviorDesigner.Runtime.BehaviorManager)ToLua.CheckObject<BehaviorDesigner.Runtime.BehaviorManager>(L, 1);
			BehaviorDesigner.Runtime.Behavior arg0 = (BehaviorDesigner.Runtime.Behavior)ToLua.CheckObject<BehaviorDesigner.Runtime.Behavior>(L, 2);
			System.Collections.Generic.List<BehaviorDesigner.Runtime.Tasks.Task> o = obj.GetActiveTasks(arg0);
			ToLua.PushSealed(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int BehaviorOnCollisionEnter(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			BehaviorDesigner.Runtime.BehaviorManager obj = (BehaviorDesigner.Runtime.BehaviorManager)ToLua.CheckObject<BehaviorDesigner.Runtime.BehaviorManager>(L, 1);
			UnityEngine.Collision arg0 = (UnityEngine.Collision)ToLua.CheckObject<UnityEngine.Collision>(L, 2);
			BehaviorDesigner.Runtime.Behavior arg1 = (BehaviorDesigner.Runtime.Behavior)ToLua.CheckObject<BehaviorDesigner.Runtime.Behavior>(L, 3);
			obj.BehaviorOnCollisionEnter(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int BehaviorOnCollisionExit(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			BehaviorDesigner.Runtime.BehaviorManager obj = (BehaviorDesigner.Runtime.BehaviorManager)ToLua.CheckObject<BehaviorDesigner.Runtime.BehaviorManager>(L, 1);
			UnityEngine.Collision arg0 = (UnityEngine.Collision)ToLua.CheckObject<UnityEngine.Collision>(L, 2);
			BehaviorDesigner.Runtime.Behavior arg1 = (BehaviorDesigner.Runtime.Behavior)ToLua.CheckObject<BehaviorDesigner.Runtime.Behavior>(L, 3);
			obj.BehaviorOnCollisionExit(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int BehaviorOnTriggerEnter(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			BehaviorDesigner.Runtime.BehaviorManager obj = (BehaviorDesigner.Runtime.BehaviorManager)ToLua.CheckObject<BehaviorDesigner.Runtime.BehaviorManager>(L, 1);
			UnityEngine.Collider arg0 = (UnityEngine.Collider)ToLua.CheckObject<UnityEngine.Collider>(L, 2);
			BehaviorDesigner.Runtime.Behavior arg1 = (BehaviorDesigner.Runtime.Behavior)ToLua.CheckObject<BehaviorDesigner.Runtime.Behavior>(L, 3);
			obj.BehaviorOnTriggerEnter(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int BehaviorOnTriggerExit(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			BehaviorDesigner.Runtime.BehaviorManager obj = (BehaviorDesigner.Runtime.BehaviorManager)ToLua.CheckObject<BehaviorDesigner.Runtime.BehaviorManager>(L, 1);
			UnityEngine.Collider arg0 = (UnityEngine.Collider)ToLua.CheckObject<UnityEngine.Collider>(L, 2);
			BehaviorDesigner.Runtime.Behavior arg1 = (BehaviorDesigner.Runtime.Behavior)ToLua.CheckObject<BehaviorDesigner.Runtime.Behavior>(L, 3);
			obj.BehaviorOnTriggerExit(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int BehaviorOnCollisionEnter2D(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			BehaviorDesigner.Runtime.BehaviorManager obj = (BehaviorDesigner.Runtime.BehaviorManager)ToLua.CheckObject<BehaviorDesigner.Runtime.BehaviorManager>(L, 1);
			UnityEngine.Collision2D arg0 = (UnityEngine.Collision2D)ToLua.CheckObject<UnityEngine.Collision2D>(L, 2);
			BehaviorDesigner.Runtime.Behavior arg1 = (BehaviorDesigner.Runtime.Behavior)ToLua.CheckObject<BehaviorDesigner.Runtime.Behavior>(L, 3);
			obj.BehaviorOnCollisionEnter2D(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int BehaviorOnCollisionExit2D(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			BehaviorDesigner.Runtime.BehaviorManager obj = (BehaviorDesigner.Runtime.BehaviorManager)ToLua.CheckObject<BehaviorDesigner.Runtime.BehaviorManager>(L, 1);
			UnityEngine.Collision2D arg0 = (UnityEngine.Collision2D)ToLua.CheckObject<UnityEngine.Collision2D>(L, 2);
			BehaviorDesigner.Runtime.Behavior arg1 = (BehaviorDesigner.Runtime.Behavior)ToLua.CheckObject<BehaviorDesigner.Runtime.Behavior>(L, 3);
			obj.BehaviorOnCollisionExit2D(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int BehaviorOnTriggerEnter2D(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			BehaviorDesigner.Runtime.BehaviorManager obj = (BehaviorDesigner.Runtime.BehaviorManager)ToLua.CheckObject<BehaviorDesigner.Runtime.BehaviorManager>(L, 1);
			UnityEngine.Collider2D arg0 = (UnityEngine.Collider2D)ToLua.CheckObject<UnityEngine.Collider2D>(L, 2);
			BehaviorDesigner.Runtime.Behavior arg1 = (BehaviorDesigner.Runtime.Behavior)ToLua.CheckObject<BehaviorDesigner.Runtime.Behavior>(L, 3);
			obj.BehaviorOnTriggerEnter2D(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int BehaviorOnTriggerExit2D(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			BehaviorDesigner.Runtime.BehaviorManager obj = (BehaviorDesigner.Runtime.BehaviorManager)ToLua.CheckObject<BehaviorDesigner.Runtime.BehaviorManager>(L, 1);
			UnityEngine.Collider2D arg0 = (UnityEngine.Collider2D)ToLua.CheckObject<UnityEngine.Collider2D>(L, 2);
			BehaviorDesigner.Runtime.Behavior arg1 = (BehaviorDesigner.Runtime.Behavior)ToLua.CheckObject<BehaviorDesigner.Runtime.Behavior>(L, 3);
			obj.BehaviorOnTriggerExit2D(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int BehaviorOnControllerColliderHit(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			BehaviorDesigner.Runtime.BehaviorManager obj = (BehaviorDesigner.Runtime.BehaviorManager)ToLua.CheckObject<BehaviorDesigner.Runtime.BehaviorManager>(L, 1);
			UnityEngine.ControllerColliderHit arg0 = (UnityEngine.ControllerColliderHit)ToLua.CheckObject<UnityEngine.ControllerColliderHit>(L, 2);
			BehaviorDesigner.Runtime.Behavior arg1 = (BehaviorDesigner.Runtime.Behavior)ToLua.CheckObject<BehaviorDesigner.Runtime.Behavior>(L, 3);
			obj.BehaviorOnControllerColliderHit(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int BehaviorOnAnimatorIK(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			BehaviorDesigner.Runtime.BehaviorManager obj = (BehaviorDesigner.Runtime.BehaviorManager)ToLua.CheckObject<BehaviorDesigner.Runtime.BehaviorManager>(L, 1);
			BehaviorDesigner.Runtime.Behavior arg0 = (BehaviorDesigner.Runtime.Behavior)ToLua.CheckObject<BehaviorDesigner.Runtime.Behavior>(L, 2);
			obj.BehaviorOnAnimatorIK(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int MapObjectToTask(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 4);
			BehaviorDesigner.Runtime.BehaviorManager obj = (BehaviorDesigner.Runtime.BehaviorManager)ToLua.CheckObject<BehaviorDesigner.Runtime.BehaviorManager>(L, 1);
			object arg0 = ToLua.ToVarObject(L, 2);
			BehaviorDesigner.Runtime.Tasks.Task arg1 = (BehaviorDesigner.Runtime.Tasks.Task)ToLua.CheckObject<BehaviorDesigner.Runtime.Tasks.Task>(L, 3);
			BehaviorDesigner.Runtime.BehaviorManager.ThirdPartyObjectType arg2 = (BehaviorDesigner.Runtime.BehaviorManager.ThirdPartyObjectType)ToLua.CheckObject(L, 4, TypeTraits<BehaviorDesigner.Runtime.BehaviorManager.ThirdPartyObjectType>.type);
			bool o = obj.MapObjectToTask(arg0, arg1, arg2);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int TaskForObject(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			BehaviorDesigner.Runtime.BehaviorManager obj = (BehaviorDesigner.Runtime.BehaviorManager)ToLua.CheckObject<BehaviorDesigner.Runtime.BehaviorManager>(L, 1);
			object arg0 = ToLua.ToVarObject(L, 2);
			BehaviorDesigner.Runtime.Tasks.Task o = obj.TaskForObject(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetTaskList(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			BehaviorDesigner.Runtime.BehaviorManager obj = (BehaviorDesigner.Runtime.BehaviorManager)ToLua.CheckObject<BehaviorDesigner.Runtime.BehaviorManager>(L, 1);
			BehaviorDesigner.Runtime.Behavior arg0 = (BehaviorDesigner.Runtime.Behavior)ToLua.CheckObject<BehaviorDesigner.Runtime.Behavior>(L, 2);
			System.Collections.Generic.List<BehaviorDesigner.Runtime.Tasks.Task> o = obj.GetTaskList(arg0);
			ToLua.PushSealed(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int op_Equality(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.ToObject(L, 1);
			UnityEngine.Object arg1 = (UnityEngine.Object)ToLua.ToObject(L, 2);
			bool o = arg0 == arg1;
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_instance(IntPtr L)
	{
		try
		{
			ToLua.Push(L, BehaviorDesigner.Runtime.BehaviorManager.instance);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_onEnableBehavior(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			BehaviorDesigner.Runtime.BehaviorManager obj = (BehaviorDesigner.Runtime.BehaviorManager)o;
			BehaviorDesigner.Runtime.BehaviorManager.BehaviorManagerHandler ret = obj.onEnableBehavior;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index onEnableBehavior on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_onTaskBreakpoint(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			BehaviorDesigner.Runtime.BehaviorManager obj = (BehaviorDesigner.Runtime.BehaviorManager)o;
			BehaviorDesigner.Runtime.BehaviorManager.BehaviorManagerHandler ret = obj.onTaskBreakpoint;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index onTaskBreakpoint on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_UpdateInterval(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			BehaviorDesigner.Runtime.BehaviorManager obj = (BehaviorDesigner.Runtime.BehaviorManager)o;
			BehaviorDesigner.Runtime.UpdateIntervalType ret = obj.UpdateInterval;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index UpdateInterval on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_UpdateIntervalSeconds(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			BehaviorDesigner.Runtime.BehaviorManager obj = (BehaviorDesigner.Runtime.BehaviorManager)o;
			float ret = obj.UpdateIntervalSeconds;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index UpdateIntervalSeconds on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_ExecutionsPerTick(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			BehaviorDesigner.Runtime.BehaviorManager obj = (BehaviorDesigner.Runtime.BehaviorManager)o;
			BehaviorDesigner.Runtime.BehaviorManager.ExecutionsPerTickType ret = obj.ExecutionsPerTick;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index ExecutionsPerTick on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_MaxTaskExecutionsPerTick(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			BehaviorDesigner.Runtime.BehaviorManager obj = (BehaviorDesigner.Runtime.BehaviorManager)o;
			int ret = obj.MaxTaskExecutionsPerTick;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index MaxTaskExecutionsPerTick on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_OnEnableBehavior(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			BehaviorDesigner.Runtime.BehaviorManager obj = (BehaviorDesigner.Runtime.BehaviorManager)o;
			BehaviorDesigner.Runtime.BehaviorManager.BehaviorManagerHandler ret = obj.OnEnableBehavior;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index OnEnableBehavior on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_OnTaskBreakpoint(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			BehaviorDesigner.Runtime.BehaviorManager obj = (BehaviorDesigner.Runtime.BehaviorManager)o;
			BehaviorDesigner.Runtime.BehaviorManager.BehaviorManagerHandler ret = obj.OnTaskBreakpoint;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index OnTaskBreakpoint on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_IsPlaying(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushboolean(L, BehaviorDesigner.Runtime.BehaviorManager.IsPlaying);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_BehaviorTrees(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			BehaviorDesigner.Runtime.BehaviorManager obj = (BehaviorDesigner.Runtime.BehaviorManager)o;
			System.Collections.Generic.List<BehaviorDesigner.Runtime.BehaviorManager.BehaviorTree> ret = obj.BehaviorTrees;
			ToLua.PushSealed(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index BehaviorTrees on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_BreakpointTree(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			BehaviorDesigner.Runtime.BehaviorManager obj = (BehaviorDesigner.Runtime.BehaviorManager)o;
			BehaviorDesigner.Runtime.Behavior ret = obj.BreakpointTree;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index BreakpointTree on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Dirty(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			BehaviorDesigner.Runtime.BehaviorManager obj = (BehaviorDesigner.Runtime.BehaviorManager)o;
			bool ret = obj.Dirty;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Dirty on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_instance(IntPtr L)
	{
		try
		{
			BehaviorDesigner.Runtime.BehaviorManager arg0 = (BehaviorDesigner.Runtime.BehaviorManager)ToLua.CheckObject<BehaviorDesigner.Runtime.BehaviorManager>(L, 2);
			BehaviorDesigner.Runtime.BehaviorManager.instance = arg0;
			BehaviorDesigner.Runtime.BehaviorManager.instance = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_onEnableBehavior(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			BehaviorDesigner.Runtime.BehaviorManager obj = (BehaviorDesigner.Runtime.BehaviorManager)o;
			BehaviorDesigner.Runtime.BehaviorManager.BehaviorManagerHandler arg0 = (BehaviorDesigner.Runtime.BehaviorManager.BehaviorManagerHandler)ToLua.CheckDelegate<BehaviorDesigner.Runtime.BehaviorManager.BehaviorManagerHandler>(L, 2);

			if (!object.ReferenceEquals(obj.onEnableBehavior, arg0))
			{
				if (obj.onEnableBehavior != null) obj.onEnableBehavior.SubRef();
				obj.onEnableBehavior = arg0;
			}

			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index onEnableBehavior on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_onTaskBreakpoint(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			BehaviorDesigner.Runtime.BehaviorManager obj = (BehaviorDesigner.Runtime.BehaviorManager)o;
			BehaviorDesigner.Runtime.BehaviorManager.BehaviorManagerHandler arg0 = (BehaviorDesigner.Runtime.BehaviorManager.BehaviorManagerHandler)ToLua.CheckDelegate<BehaviorDesigner.Runtime.BehaviorManager.BehaviorManagerHandler>(L, 2);

			if (!object.ReferenceEquals(obj.onTaskBreakpoint, arg0))
			{
				if (obj.onTaskBreakpoint != null) obj.onTaskBreakpoint.SubRef();
				obj.onTaskBreakpoint = arg0;
			}

			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index onTaskBreakpoint on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_UpdateInterval(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			BehaviorDesigner.Runtime.BehaviorManager obj = (BehaviorDesigner.Runtime.BehaviorManager)o;
			BehaviorDesigner.Runtime.UpdateIntervalType arg0 = (BehaviorDesigner.Runtime.UpdateIntervalType)ToLua.CheckObject(L, 2, TypeTraits<BehaviorDesigner.Runtime.UpdateIntervalType>.type);
			obj.UpdateInterval = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index UpdateInterval on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_UpdateIntervalSeconds(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			BehaviorDesigner.Runtime.BehaviorManager obj = (BehaviorDesigner.Runtime.BehaviorManager)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.UpdateIntervalSeconds = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index UpdateIntervalSeconds on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_ExecutionsPerTick(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			BehaviorDesigner.Runtime.BehaviorManager obj = (BehaviorDesigner.Runtime.BehaviorManager)o;
			BehaviorDesigner.Runtime.BehaviorManager.ExecutionsPerTickType arg0 = (BehaviorDesigner.Runtime.BehaviorManager.ExecutionsPerTickType)ToLua.CheckObject(L, 2, TypeTraits<BehaviorDesigner.Runtime.BehaviorManager.ExecutionsPerTickType>.type);
			obj.ExecutionsPerTick = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index ExecutionsPerTick on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_MaxTaskExecutionsPerTick(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			BehaviorDesigner.Runtime.BehaviorManager obj = (BehaviorDesigner.Runtime.BehaviorManager)o;
			int arg0 = (int)LuaDLL.luaL_checkinteger(L, 2);
			obj.MaxTaskExecutionsPerTick = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index MaxTaskExecutionsPerTick on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_UnitTesting(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			BehaviorDesigner.Runtime.BehaviorManager obj = (BehaviorDesigner.Runtime.BehaviorManager)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.UnitTesting = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index UnitTesting on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_OnEnableBehavior(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			BehaviorDesigner.Runtime.BehaviorManager obj = (BehaviorDesigner.Runtime.BehaviorManager)o;
			BehaviorDesigner.Runtime.BehaviorManager.BehaviorManagerHandler arg0 = (BehaviorDesigner.Runtime.BehaviorManager.BehaviorManagerHandler)ToLua.CheckDelegate<BehaviorDesigner.Runtime.BehaviorManager.BehaviorManagerHandler>(L, 2);

			if (!object.ReferenceEquals(obj.OnEnableBehavior, arg0))
			{
				if (obj.OnEnableBehavior != null) obj.OnEnableBehavior.SubRef();
				obj.OnEnableBehavior = arg0;
			}

			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index OnEnableBehavior on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_OnTaskBreakpoint(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			BehaviorDesigner.Runtime.BehaviorManager obj = (BehaviorDesigner.Runtime.BehaviorManager)o;
			BehaviorDesigner.Runtime.BehaviorManager.BehaviorManagerHandler arg0 = (BehaviorDesigner.Runtime.BehaviorManager.BehaviorManagerHandler)ToLua.CheckDelegate<BehaviorDesigner.Runtime.BehaviorManager.BehaviorManagerHandler>(L, 2);

			if (!object.ReferenceEquals(obj.OnTaskBreakpoint, arg0))
			{
				if (obj.OnTaskBreakpoint != null) obj.OnTaskBreakpoint.SubRef();
				obj.OnTaskBreakpoint = arg0;
			}

			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index OnTaskBreakpoint on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_BreakpointTree(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			BehaviorDesigner.Runtime.BehaviorManager obj = (BehaviorDesigner.Runtime.BehaviorManager)o;
			BehaviorDesigner.Runtime.Behavior arg0 = (BehaviorDesigner.Runtime.Behavior)ToLua.CheckObject<BehaviorDesigner.Runtime.Behavior>(L, 2);
			obj.BreakpointTree = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index BreakpointTree on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_Dirty(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			BehaviorDesigner.Runtime.BehaviorManager obj = (BehaviorDesigner.Runtime.BehaviorManager)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.Dirty = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Dirty on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int BehaviorDesigner_Runtime_BehaviorManager_BehaviorManagerHandler(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);
			LuaFunction func = ToLua.CheckLuaFunction(L, 1);

			if (count == 1)
			{
				Delegate arg1 = DelegateTraits<BehaviorDesigner.Runtime.BehaviorManager.BehaviorManagerHandler>.Create(func);
				ToLua.Push(L, arg1);
				func.Dispose();
			}
			else
			{
				LuaTable self = ToLua.CheckLuaTable(L, 2);
				Delegate arg1 = DelegateTraits<BehaviorDesigner.Runtime.BehaviorManager.BehaviorManagerHandler>.Create(func, self);
				ToLua.Push(L, arg1);
				func.Dispose();
				self.Dispose();
			}
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

