//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class UnityEngine_StateMachineBehaviourWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(UnityEngine.StateMachineBehaviour), typeof(UnityEngine.ScriptableObject));
		L.RegFunction("OnStateEnter", new LuaCSFunction(OnStateEnter));
		L.RegFunction("OnStateUpdate", new LuaCSFunction(OnStateUpdate));
		L.RegFunction("OnStateExit", new LuaCSFunction(OnStateExit));
		L.RegFunction("OnStateMove", new LuaCSFunction(OnStateMove));
		L.RegFunction("OnStateIK", new LuaCSFunction(OnStateIK));
		L.RegFunction("OnStateMachineEnter", new LuaCSFunction(OnStateMachineEnter));
		L.RegFunction("OnStateMachineExit", new LuaCSFunction(OnStateMachineExit));
		L.RegFunction("__eq", new LuaCSFunction(op_Equality));
		L.RegFunction("__tostring", new LuaCSFunction(ToLua.op_ToString));
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OnStateEnter(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 4)
			{
				UnityEngine.StateMachineBehaviour obj = (UnityEngine.StateMachineBehaviour)ToLua.CheckObject<UnityEngine.StateMachineBehaviour>(L, 1);
				UnityEngine.Animator arg0 = (UnityEngine.Animator)ToLua.CheckObject<UnityEngine.Animator>(L, 2);
				UnityEngine.AnimatorStateInfo arg1 = StackTraits<UnityEngine.AnimatorStateInfo>.Check(L, 3);
				int arg2 = (int)LuaDLL.luaL_checkinteger(L, 4);
				obj.OnStateEnter(arg0, arg1, arg2);
				return 0;
			}
			else if (count == 5)
			{
				UnityEngine.StateMachineBehaviour obj = (UnityEngine.StateMachineBehaviour)ToLua.CheckObject<UnityEngine.StateMachineBehaviour>(L, 1);
				UnityEngine.Animator arg0 = (UnityEngine.Animator)ToLua.CheckObject<UnityEngine.Animator>(L, 2);
				UnityEngine.AnimatorStateInfo arg1 = StackTraits<UnityEngine.AnimatorStateInfo>.Check(L, 3);
				int arg2 = (int)LuaDLL.luaL_checkinteger(L, 4);
				UnityEngine.Animations.AnimatorControllerPlayable arg3 = StackTraits<UnityEngine.Animations.AnimatorControllerPlayable>.Check(L, 5);
				obj.OnStateEnter(arg0, arg1, arg2, arg3);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: UnityEngine.StateMachineBehaviour.OnStateEnter");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OnStateUpdate(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 4)
			{
				UnityEngine.StateMachineBehaviour obj = (UnityEngine.StateMachineBehaviour)ToLua.CheckObject<UnityEngine.StateMachineBehaviour>(L, 1);
				UnityEngine.Animator arg0 = (UnityEngine.Animator)ToLua.CheckObject<UnityEngine.Animator>(L, 2);
				UnityEngine.AnimatorStateInfo arg1 = StackTraits<UnityEngine.AnimatorStateInfo>.Check(L, 3);
				int arg2 = (int)LuaDLL.luaL_checkinteger(L, 4);
				obj.OnStateUpdate(arg0, arg1, arg2);
				return 0;
			}
			else if (count == 5)
			{
				UnityEngine.StateMachineBehaviour obj = (UnityEngine.StateMachineBehaviour)ToLua.CheckObject<UnityEngine.StateMachineBehaviour>(L, 1);
				UnityEngine.Animator arg0 = (UnityEngine.Animator)ToLua.CheckObject<UnityEngine.Animator>(L, 2);
				UnityEngine.AnimatorStateInfo arg1 = StackTraits<UnityEngine.AnimatorStateInfo>.Check(L, 3);
				int arg2 = (int)LuaDLL.luaL_checkinteger(L, 4);
				UnityEngine.Animations.AnimatorControllerPlayable arg3 = StackTraits<UnityEngine.Animations.AnimatorControllerPlayable>.Check(L, 5);
				obj.OnStateUpdate(arg0, arg1, arg2, arg3);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: UnityEngine.StateMachineBehaviour.OnStateUpdate");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OnStateExit(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 4)
			{
				UnityEngine.StateMachineBehaviour obj = (UnityEngine.StateMachineBehaviour)ToLua.CheckObject<UnityEngine.StateMachineBehaviour>(L, 1);
				UnityEngine.Animator arg0 = (UnityEngine.Animator)ToLua.CheckObject<UnityEngine.Animator>(L, 2);
				UnityEngine.AnimatorStateInfo arg1 = StackTraits<UnityEngine.AnimatorStateInfo>.Check(L, 3);
				int arg2 = (int)LuaDLL.luaL_checkinteger(L, 4);
				obj.OnStateExit(arg0, arg1, arg2);
				return 0;
			}
			else if (count == 5)
			{
				UnityEngine.StateMachineBehaviour obj = (UnityEngine.StateMachineBehaviour)ToLua.CheckObject<UnityEngine.StateMachineBehaviour>(L, 1);
				UnityEngine.Animator arg0 = (UnityEngine.Animator)ToLua.CheckObject<UnityEngine.Animator>(L, 2);
				UnityEngine.AnimatorStateInfo arg1 = StackTraits<UnityEngine.AnimatorStateInfo>.Check(L, 3);
				int arg2 = (int)LuaDLL.luaL_checkinteger(L, 4);
				UnityEngine.Animations.AnimatorControllerPlayable arg3 = StackTraits<UnityEngine.Animations.AnimatorControllerPlayable>.Check(L, 5);
				obj.OnStateExit(arg0, arg1, arg2, arg3);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: UnityEngine.StateMachineBehaviour.OnStateExit");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OnStateMove(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 4)
			{
				UnityEngine.StateMachineBehaviour obj = (UnityEngine.StateMachineBehaviour)ToLua.CheckObject<UnityEngine.StateMachineBehaviour>(L, 1);
				UnityEngine.Animator arg0 = (UnityEngine.Animator)ToLua.CheckObject<UnityEngine.Animator>(L, 2);
				UnityEngine.AnimatorStateInfo arg1 = StackTraits<UnityEngine.AnimatorStateInfo>.Check(L, 3);
				int arg2 = (int)LuaDLL.luaL_checkinteger(L, 4);
				obj.OnStateMove(arg0, arg1, arg2);
				return 0;
			}
			else if (count == 5)
			{
				UnityEngine.StateMachineBehaviour obj = (UnityEngine.StateMachineBehaviour)ToLua.CheckObject<UnityEngine.StateMachineBehaviour>(L, 1);
				UnityEngine.Animator arg0 = (UnityEngine.Animator)ToLua.CheckObject<UnityEngine.Animator>(L, 2);
				UnityEngine.AnimatorStateInfo arg1 = StackTraits<UnityEngine.AnimatorStateInfo>.Check(L, 3);
				int arg2 = (int)LuaDLL.luaL_checkinteger(L, 4);
				UnityEngine.Animations.AnimatorControllerPlayable arg3 = StackTraits<UnityEngine.Animations.AnimatorControllerPlayable>.Check(L, 5);
				obj.OnStateMove(arg0, arg1, arg2, arg3);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: UnityEngine.StateMachineBehaviour.OnStateMove");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OnStateIK(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 4)
			{
				UnityEngine.StateMachineBehaviour obj = (UnityEngine.StateMachineBehaviour)ToLua.CheckObject<UnityEngine.StateMachineBehaviour>(L, 1);
				UnityEngine.Animator arg0 = (UnityEngine.Animator)ToLua.CheckObject<UnityEngine.Animator>(L, 2);
				UnityEngine.AnimatorStateInfo arg1 = StackTraits<UnityEngine.AnimatorStateInfo>.Check(L, 3);
				int arg2 = (int)LuaDLL.luaL_checkinteger(L, 4);
				obj.OnStateIK(arg0, arg1, arg2);
				return 0;
			}
			else if (count == 5)
			{
				UnityEngine.StateMachineBehaviour obj = (UnityEngine.StateMachineBehaviour)ToLua.CheckObject<UnityEngine.StateMachineBehaviour>(L, 1);
				UnityEngine.Animator arg0 = (UnityEngine.Animator)ToLua.CheckObject<UnityEngine.Animator>(L, 2);
				UnityEngine.AnimatorStateInfo arg1 = StackTraits<UnityEngine.AnimatorStateInfo>.Check(L, 3);
				int arg2 = (int)LuaDLL.luaL_checkinteger(L, 4);
				UnityEngine.Animations.AnimatorControllerPlayable arg3 = StackTraits<UnityEngine.Animations.AnimatorControllerPlayable>.Check(L, 5);
				obj.OnStateIK(arg0, arg1, arg2, arg3);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: UnityEngine.StateMachineBehaviour.OnStateIK");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OnStateMachineEnter(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 3)
			{
				UnityEngine.StateMachineBehaviour obj = (UnityEngine.StateMachineBehaviour)ToLua.CheckObject<UnityEngine.StateMachineBehaviour>(L, 1);
				UnityEngine.Animator arg0 = (UnityEngine.Animator)ToLua.CheckObject<UnityEngine.Animator>(L, 2);
				int arg1 = (int)LuaDLL.luaL_checkinteger(L, 3);
				obj.OnStateMachineEnter(arg0, arg1);
				return 0;
			}
			else if (count == 4)
			{
				UnityEngine.StateMachineBehaviour obj = (UnityEngine.StateMachineBehaviour)ToLua.CheckObject<UnityEngine.StateMachineBehaviour>(L, 1);
				UnityEngine.Animator arg0 = (UnityEngine.Animator)ToLua.CheckObject<UnityEngine.Animator>(L, 2);
				int arg1 = (int)LuaDLL.luaL_checkinteger(L, 3);
				UnityEngine.Animations.AnimatorControllerPlayable arg2 = StackTraits<UnityEngine.Animations.AnimatorControllerPlayable>.Check(L, 4);
				obj.OnStateMachineEnter(arg0, arg1, arg2);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: UnityEngine.StateMachineBehaviour.OnStateMachineEnter");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OnStateMachineExit(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 3)
			{
				UnityEngine.StateMachineBehaviour obj = (UnityEngine.StateMachineBehaviour)ToLua.CheckObject<UnityEngine.StateMachineBehaviour>(L, 1);
				UnityEngine.Animator arg0 = (UnityEngine.Animator)ToLua.CheckObject<UnityEngine.Animator>(L, 2);
				int arg1 = (int)LuaDLL.luaL_checkinteger(L, 3);
				obj.OnStateMachineExit(arg0, arg1);
				return 0;
			}
			else if (count == 4)
			{
				UnityEngine.StateMachineBehaviour obj = (UnityEngine.StateMachineBehaviour)ToLua.CheckObject<UnityEngine.StateMachineBehaviour>(L, 1);
				UnityEngine.Animator arg0 = (UnityEngine.Animator)ToLua.CheckObject<UnityEngine.Animator>(L, 2);
				int arg1 = (int)LuaDLL.luaL_checkinteger(L, 3);
				UnityEngine.Animations.AnimatorControllerPlayable arg2 = StackTraits<UnityEngine.Animations.AnimatorControllerPlayable>.Check(L, 4);
				obj.OnStateMachineExit(arg0, arg1, arg2);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: UnityEngine.StateMachineBehaviour.OnStateMachineExit");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int op_Equality(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.ToObject(L, 1);
			UnityEngine.Object arg1 = (UnityEngine.Object)ToLua.ToObject(L, 2);
			bool o = arg0 == arg1;
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

