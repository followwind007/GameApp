//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class EventDispatcherWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(EventDispatcher), typeof(System.Object));
		L.RegFunction("AddListener", new LuaCSFunction(AddListener));
		L.RegFunction("RemoveListener", new LuaCSFunction(RemoveListener));
		L.RegFunction("Dispatch", new LuaCSFunction(Dispatch));
		L.RegFunction("DispatchLua", new LuaCSFunction(DispatchLua));
		L.RegFunction("__tostring", new LuaCSFunction(ToLua.op_ToString));
		L.RegVar("Instance", new LuaCSFunction(get_Instance), null);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AddListener(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 3 && TypeChecker.CheckTypes<System.Action>(L, 3))
			{
				EventDispatcher obj = (EventDispatcher)ToLua.CheckObject<EventDispatcher>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				System.Action arg1 = (System.Action)ToLua.ToObject(L, 3);
				obj.AddListener(arg0, arg1);
				return 0;
			}
			else if (count == 3 && TypeChecker.CheckTypes<System.Delegate>(L, 3))
			{
				EventDispatcher obj = (EventDispatcher)ToLua.CheckObject<EventDispatcher>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				System.Delegate arg1 = (System.Delegate)ToLua.ToObject(L, 3);
				obj.AddListener(arg0, arg1);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: EventDispatcher.AddListener");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int RemoveListener(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			EventDispatcher obj = (EventDispatcher)ToLua.CheckObject<EventDispatcher>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			System.Action arg1 = (System.Action)ToLua.CheckDelegate<System.Action>(L, 3);
			obj.RemoveListener(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Dispatch(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				EventDispatcher obj = (EventDispatcher)ToLua.CheckObject<EventDispatcher>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				obj.Dispatch(arg0);
				return 0;
			}
			else if (count == 3 && TypeChecker.CheckTypes<LuaInterface.LuaTable>(L, 3))
			{
				EventDispatcher obj = (EventDispatcher)ToLua.CheckObject<EventDispatcher>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				LuaTable arg1 = ToLua.ToLuaTable(L, 3);
				obj.Dispatch(arg0, arg1);
				return 0;
			}
			else if (count == 3 && TypeChecker.CheckTypes<string>(L, 3))
			{
				EventDispatcher obj = (EventDispatcher)ToLua.CheckObject<EventDispatcher>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				string arg1 = ToLua.ToString(L, 3);
				obj.Dispatch(arg0, arg1);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: EventDispatcher.Dispatch");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int DispatchLua(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				EventDispatcher obj = (EventDispatcher)ToLua.CheckObject<EventDispatcher>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				obj.DispatchLua(arg0);
				return 0;
			}
			else if (count == 3)
			{
				EventDispatcher obj = (EventDispatcher)ToLua.CheckObject<EventDispatcher>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				string arg1 = ToLua.CheckString(L, 3);
				obj.DispatchLua(arg0, arg1);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: EventDispatcher.DispatchLua");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Instance(IntPtr L)
	{
		try
		{
			ToLua.PushObject(L, EventDispatcher.Instance);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

