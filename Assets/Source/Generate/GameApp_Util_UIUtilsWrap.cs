//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class GameApp_Util_UIUtilsWrap
{
	public static void Register(LuaState L)
	{
		L.BeginStaticLibs("UIUtils");
		L.RegFunction("SetCanvas", new LuaCSFunction(SetCanvas));
		L.RegFunction("ShrinkText", new LuaCSFunction(ShrinkText));
		L.RegVar("ReferenceResolution", new LuaCSFunction(get_ReferenceResolution), null);
		L.EndStaticLibs();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetCanvas(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 4);
			UnityEngine.GameObject arg0 = (UnityEngine.GameObject)ToLua.CheckObject<UnityEngine.GameObject>(L, 1);
			UnityEngine.Camera arg1 = (UnityEngine.Camera)ToLua.CheckObject<UnityEngine.Camera>(L, 2);
			int arg2 = (int)LuaDLL.luaL_checkinteger(L, 3);
			int arg3 = (int)LuaDLL.luaL_checkinteger(L, 4);
			GameApp.Util.UIUtils.SetCanvas(arg0, arg1, arg2, arg3);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ShrinkText(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				string arg0 = ToLua.CheckString(L, 1);
				int arg1 = (int)LuaDLL.luaL_checkinteger(L, 2);
				string o = GameApp.Util.UIUtils.ShrinkText(arg0, arg1);
				LuaDLL.lua_pushstring(L, o);
				return 1;
			}
			else if (count == 3)
			{
				string arg0 = ToLua.CheckString(L, 1);
				int arg1 = (int)LuaDLL.luaL_checkinteger(L, 2);
				string arg2 = ToLua.CheckString(L, 3);
				string o = GameApp.Util.UIUtils.ShrinkText(arg0, arg1, arg2);
				LuaDLL.lua_pushstring(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: GameApp.Util.UIUtils.ShrinkText");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_ReferenceResolution(IntPtr L)
	{
		try
		{
			ToLua.Push(L, GameApp.Util.UIUtils.ReferenceResolution);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

